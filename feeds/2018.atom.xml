<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dtsomp's blog - 2018</title><link href="https://blog.dtsomp.net/" rel="alternate"></link><link href="https://blog.dtsomp.net/feeds/2018.atom.xml" rel="self"></link><id>https://blog.dtsomp.net/</id><updated>2018-08-18T00:00:00+02:00</updated><entry><title>Automated Pelican builds on Github Pages</title><link href="https://blog.dtsomp.net/automated-pelican-builds-on-github-pages.html" rel="alternate"></link><published>2018-08-18T00:00:00+02:00</published><updated>2018-08-18T00:00:00+02:00</updated><author><name>dtsomp</name></author><id>tag:blog.dtsomp.net,2018-08-18:/automated-pelican-builds-on-github-pages.html</id><summary type="html">&lt;p&gt;I am not a huge user of Github, mainly because there is very little code I feel comfortable sharing with others.
However, excuses are needed to try out new stuff, so I set up this blog on &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Github Pages (GhP in short) is a fancy name for repositories â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am not a huge user of Github, mainly because there is very little code I feel comfortable sharing with others.
However, excuses are needed to try out new stuff, so I set up this blog on &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Github Pages (GhP in short) is a fancy name for repositories marked for HTML hosting.
Even free accounts get one, so go ahead and create a new repository called &lt;code&gt;username.github.io&lt;/code&gt;, replacing &lt;code&gt;username&lt;/code&gt; with your Github username.
E.g. in my case my GhP repo is called &lt;a href="https://github.com/dtsomp/dtsomp.github.io"&gt;dtsomp.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just add an &lt;code&gt;index.html&lt;/code&gt;, commit and push to it.
Congratulations, your new website is avaiable on https://username.github.io.&lt;/p&gt;
&lt;p&gt;Now for the really interesting stuff.&lt;/p&gt;
&lt;p&gt;I couldn't create decent-looking HTML pages to save my life and this is why I'm toying around with &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; for generating my blog pages.
I could use Pelican's (rather under-documented) publish functionality to push my content to GhP or just copy-paste the generated HTML files into my local copy of the repo and commit-push.&lt;/p&gt;
&lt;p&gt;Or I could have &lt;a href="https://travis-ci.com/"&gt;Travis CI&lt;/a&gt; do this for me.&lt;/p&gt;
&lt;p&gt;So here's the setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a GhP repo for hosting the final HTML files.&lt;/li&gt;
&lt;li&gt;a Github token for commiting to this repo.&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://github.com/dtsomp/blog"&gt;source repo&lt;/a&gt; which tracks the original Pelican project directory of the blog, containing source files, publishing configuration etc.&lt;/li&gt;
&lt;li&gt;Travis CI triggering builds after every push to the source repo and using the token to update the GhP repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The instructions below are in no way intended to serve as notes for my absent-minded self. No sir. Nuh-uh.&lt;/p&gt;
&lt;p&gt;First step, create the repository for your blog's source code. 
Add all of your code, then add the following files at the root of the directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dtsomp/blog/blob/master/requirements.txt"&gt;requirements.txt&lt;/a&gt;, contains the Python modules required by Pelican for generating the HTML pages.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dtsomp/blog/blob/master/.travis.yml"&gt;.travis.yml&lt;/a&gt;, contains the steps that Travis needs to take.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dtsomp/blog/blob/master/deploy.sh"&gt;deploy.sh&lt;/a&gt; is the script called in the last step of &lt;code&gt;.travis.yml&lt;/code&gt;, it copies the generated HTML files to the GhP repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Important: make sure you update &lt;code&gt;TARGET_REPO&lt;/code&gt; in &lt;code&gt;deploy.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Regarding the token, you can generate it in your Github's profile &lt;a href="https://github.com/settings/tokens"&gt;personal access tokens page&lt;/a&gt;.
Click on "&lt;em&gt;Generate new token&lt;/em&gt;", add a description (something like "blog-ci-token") and I would advise enabling only the following scopes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;repo:status&lt;/li&gt;
&lt;li&gt;repo_deployment&lt;/li&gt;
&lt;li&gt;public_repo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once it's generated, you'll get a long string, e.g. "73e3b4e29bd10e3af8f4c3b9cb0f949622f07e24".
Copy it, you'll need it later on.
(I should point out that this is a random string, not an actual token of mine :P)&lt;/p&gt;
&lt;p&gt;Now go to &lt;a href="https://travis-ci.com"&gt;https://travis-ci.com&lt;/a&gt; and hook it up to your Github account. 
The requirement here is that Travis is enabled for the repository that contains the blog source.&lt;/p&gt;
&lt;p&gt;The repo will show up in your Travis CI profile. Hit the Settings button for it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="travis ci profile" src="/images/2018/travis-ci-profile.png"&gt;&lt;/p&gt;
&lt;p&gt;Scroll down to Enviromental Variables, add a new one named "GITHUB_TOKEN" and use the token string as value. 
"Display value in build log" should OFF.
You could use a different name instead of GITHUB_TOKEN, just make sure that &lt;code&gt;deploy.sh&lt;/code&gt; is updated accordingly.&lt;/p&gt;
&lt;p&gt;At this point, you &lt;em&gt;should&lt;/em&gt; be ready to go. 
Pushing to your source repo should trigger a Travis build, generate the HTML content and push it to your page repo.&lt;/p&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;&lt;s&gt;Sites where I stole content from&lt;/s&gt; &lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serge-m.github.io/set-up-travis-ci-for-building-personal-page-on-github-pages-with-pelican.html"&gt;Set up Travis CI for building personal page on Github Pages with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html"&gt;How to automatically build your Pelican blog and publish it to Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry></feed>